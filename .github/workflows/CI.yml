name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:

  test:
    name: Tests
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git config --global user.email github-actions@github.com
          git config --global user.name github-actions

      - name: Conventional commit check
        uses: cocogitto/cocogitto-action@v3.4
        with:
          git-user: 'github-actions'
          git-user-email: 'github-actions@github.com'

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - uses: actions-rs/cargo@v1
        with:
          command: llvm-cov
          args: --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: false

      - uses: Swatinem/rust-cache@v1

  lints:
    name: Format & Lint
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: clippy
          args: -- -D warnings

      - uses: Swatinem/rust-cache@v1

  arch-matrix:
    needs: [lints, test]
    runs-on: ubuntu-latest
    env:
      CROSS_CONFIG: Cross.toml
    strategy:
      matrix:
        target: [ "armv7-unknown-linux-musleabihf", "x86_64-unknown-linux-musl", "aarch64-unknown-linux-musl" ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --target ${{ matrix.target }} --release

      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target }}-gill-app-latest
          path: ./target/${{ matrix.target }}/release/gill-app

      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target }}-gill-git-server-latest
          path: ./target/${{ matrix.target }}/release/gill-git-server

      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target }}-post-receive-latest
          path: ./target/${{ matrix.target }}/release/post-receive

  docker-build:
    name: Update docker multi-arch latest
    needs: [ arch-matrix ]
    runs-on: ubuntu-latest
    steps:
      - name: Install docker buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest

      - name: Docker Hub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


      - uses: actions/download-artifact@master
        with:
          name: "armv7-unknown-linux-musleabihf-gill-app-latest"
          path: ./target/armv7-unknown-linux-musleabihf/release/gill-app
      - uses: actions/download-artifact@master
        with:
          name: "armv7-unknown-linux-musleabihf-gill-git-server-latest"
          path: ./target/armv7-unknown-linux-musleabihf/release/gill-git-server
      - uses: actions/download-artifact@master
        with:
          name: "armv7-unknown-linux-musleabihf-post-receive-latest"
          path: ./target/armv7-unknown-linux-musleabihf/release/post-receive

      - uses: actions/download-artifact@master
        with:
          name: "x86_64-unknown-linux-musl-gill-app-latest"
          path: ./target/x86_64-unknown-linux-musl/release/gill-app
      - uses: actions/download-artifact@master
        with:
          name: "x86_64-unknown-linux-musl-gill-git-server-latest"
          path: ./target/x86_64-unknown-linux-musl/release/gill-git-server
      - uses: actions/download-artifact@master
        with:
          name: "x86_64-unknown-linux-musl-post-receive-latest"
          path: ./target/x86_64-unknown-linux-musl/release/post-receive

      - uses: actions/download-artifact@master
        with:
          name: "aarch64-unknown-linux-musl-gill-app-latest"
          path: ./target/aarch64-unknown-linux-musl/release/gill-app
      - uses: actions/download-artifact@master
        with:
          name: "aarch64-unknown-linux-musl-gill-git-server-latest"
          path: ./target/aarch64-unknown-linux-musl/release/gill-git-server
      - uses: actions/download-artifact@master
        with:
          name: "aarch64-unknown-linux-musl-post-receive-latest"
          path: ./target/aarch64-unknown-linux-musl/release/post-receive

      - name: Update multi-arch container latest
        run: |
          docker buildx build \
          --push --platform linux/amd64,linux/arm/v7,linux/arm64/v8 \
          . -t gillpub/gill:latest